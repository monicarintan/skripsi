/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ahc.view;

import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

/**
 *
 * @author MONICA
 */
public class input extends javax.swing.JFrame {

    /**
     * Creates new form input
     */
    private ArrayListPointa> data;
    private File namaFileExcel;
    private JFileChooser chooser = new JFileChooser();

    public input() {
        initComponents();
//        setExtendedState(this.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldFile = new javax.swing.JTextField();
        CariButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ExcelTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AtributTable = new javax.swing.JTable();
        OkButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("AGGLOMERATIVE HIERARCHIAL CLUSTERING");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.getAccessibleContext().setAccessibleDescription("");

        jLabel2.setText("Masukkan file");

        jTextFieldFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFileActionPerformed(evt);
            }
        });

        CariButton.setText("Cari");
        CariButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CariButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldFile, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(CariButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldFile, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(CariButton))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        ExcelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(ExcelTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
        );

        AtributTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        AtributTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AtributTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AtributTable);

        OkButton.setText("OK");
        OkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(OkButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(OkButton)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabel5.setText("Cluster yang diinginkan");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        jDesktopPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jPanel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jPanel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDesktopPane1)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CariButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CariButtonActionPerformed
        // TODO add your handling code here:
        openFile();
    }//GEN-LAST:event_CariButtonActionPerformed

    private void jTextFieldFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFileActionPerformed
        // TODO add your handling code here:
        openFile();
    }//GEN-LAST:event_jTextFieldFileActionPerformed

    private void OkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkButtonActionPerformed
        // TODO add your handling code here:

        if (data == null) {
            data = new ArrayList<>();
        }
        i:
        for (int i = 0; i < ExcelTable.getModel().getRowCount(); i++) {
//            System.out.print(ExcelTable.getValueAt(i, 0) + " ");
            String id = Objects.toString(ExcelTable.getValueAt(i, 0));
            if (id == null || id.equals("")) {
                continue;
            }
            double[] points = new double[ExcelTable.getModel().getColumnCount() - 4];
            for (int j = 0; j < points.length; j++) {
//                System.out.print(ExcelTable.getValueAt(i, j + 4) + " ");
                String content = Objects.toString(ExcelTable.getValueAt(i, j + 4));
                if (content != null && !content.equals("") && !content.equals("null")) {
                    NumberFormat nf = NumberFormat.getInstance();
                    if (nf instanceof DecimalFormat) {
                        ((DecimalFormat) nf).getDecimalFormatSymbols().setDecimalSeparator(',');
                    }
                    try {
                        points[j] = ((Number) nf.parse(content)).doubleValue();
                    } catch (ParseException ex) {
                        ex.printStackTrace();
                    }
                } else {
                    continue i;
                }
            }
            int[] cols = AtributTable.getSelectedRows();
          Pointta d = nPointata(id, points, cols);
            data.add(d);
            System.out.println();
        }
        System.out.println(data);
    }//GEN-LAST:event_OkButtonActionPerformed

    private void AtributTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AtributTableMouseClicked
        // TODO add your handling code here:
        int RowBaris = AtributTable.getSelectedRow();
        String Kode = AtributTable.getValueAt(RowBaris,0).toString();
    }//GEN-LAST:event_AtributTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new input().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AtributTable;
    private javax.swing.JButton CariButton;
    private javax.swing.JTable ExcelTable;
    private javax.swing.JButton OkButton;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextFieldFile;
    // End of variables declaration//GEN-END:variables

    private Map<String, Boolean> mapOfColumns;

    private void openFile() {
        final JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(this);

        try {
            jTextFieldFile.setText("");
            namaFileExcel = fc.getSelectedFile();
            jTextFieldFile.setText(namaFileExcel.toString());
            read();

        } catch (Exception ioe) {
            System.out.println(ioe.toString());
        }
    }

    private void read() throws IOException, BiffException {
        if (namaFileExcel != null) {
            try {
                Workbook w = Workbook.getWorkbook(namaFileExcel);
                // Get the first sheet
                // TODO: ini bisa diganti untuk multiple sheets sekaligus
                Sheet sheet = w.getSheet(0);

                // Loop over first 10 column and lines
                int jmlCol = sheet.getColumns();
                int jmlRow = sheet.getRows();
                final String[] namaKolom = new String[jmlCol];
                Object[][] isiData = new Object[jmlRow][jmlCol];

                // KALAU BARIS DATANYA TIDAK ADA, BERATI DATANYA KOSONG
                if (jmlRow > 0) {

                    // ASUMSI BAHWA BARIS PERTAMA ADALAH NAMA KOLOM
                    for (int j = 0; j < jmlCol; j++) {
                        namaKolom[j] = sheet.getCell(j, 0).getContents().toString();

                    }
                   PointData DATA
                    for (int j = 0; j < jmlCol; j++) {
                        for (int i = 1; i < jmlRow; i++) {
                            isiData[i - 1][j] = sheet.getCell(j, i).getContents();
                        }
                    }
                }

                // MASUKAN JUDUL KOLOM N ISI DATA KE TABEL
                ExcelTable.setModel(new javax.swing.table.DefaultTableModel(isiData, namaKolom));

                ExcelTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                jScrollPane3.setViewportView(ExcelTable);
                mapOfColumns = new HashMap<>();
                for (int i = 4; i < namaKolom.length; i++) {
                    mapOfColumns.put(namaKolom[i], false);
                }
                //UNTUK MENAMPILKAN ATRIBUT YANG ADA 
                AtributTable.setModel(new AbstractTableModel() {
                    @Override
                    public int getRowCount() {
                        return mapOfColumns.size();
                    }

                    @Override
                    public int getColumnCount() {
                        return 2;
                    }

                    @Override
                    public String getColumnName(int ColumnNumber) {
                        switch (ColumnNumber) {
                            case 0:
                                return "Atribut";
                            default:
                                return "Pilihan";
                        }
                    }

                    @Override
                    public Class<?> getColumnClass(int columnIndex) {
                        switch (columnIndex) {
                            case 0:
                                return String.class;
                            default:
                                return Boolean.class;
                        }
                    }

                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return columnIndex == 1;
                    }

                    @Override
                    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                        String attrName = getValueAt(rowIndex, 0).toString();
                        Boolean selected = (Boolean) aValue;
                        mapOfColumns.put(attrName, selected);
                        for (int i = 0; i < getRowCount(); i++) {
                            String name = getValueAt(i, 0).toString();
                            for (String c : mapOfColumns.keySet()) {
                                if (c.equals(name) && mapOfColumns.get(c)){
                                AtributTable.addRowSelectionInterval(i, i);
                            }
                                
                            }
                        }
                    }

                    @Override
                    public Object getValueAt(int rowIndex, int columnIndex) {
                        List<String> colNames = new ArrayList<>(mapOfColumns.keySet());
                        Collections.sort(colNames, new Comparator<String>() {

                            @Override
                            public int compare(String o1, String o2) {
                                int dif = 0;
                                for (; Character.isAlphabetic(o1.charAt(dif)); dif++);

                                int num1 = Integer.parseInt(o1.substring(dif));
                                int num2 = Integer.parseInt(o2.substring(dif));
                                return Integer.compare(num1, num2);
                            }
                        });
                        switch (columnIndex) {
                            case 0: {
                                return colNames.get(rowIndex);
                            }
                            default:
                                return mapOfColumns.get(colNames.get(rowIndex));

                        }
                    }
                }
                );
            } catch (BiffException e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih file terlebih dahulu!");
            CariButton.requestFocus();
        }

    }

    public void pilihatribut() {
        try {
            int jumlah = AtributTable.getSelectedRowCount();
            //   int tesIndex;
            final String[] namaKolomTerpilih = new String[jumlah];
            for (int i = 0; i < jumlah; i++) {
                namaKolomTerpilih[i] = AtributTable.getValueAt(i, 0).toString();
            }

            int kolom[] = new int[namaKolomTerpilih.length];
            for (int i = 0; i < namaKolomTerpilih.length; i++) {
                System.out.println("Atrib " + i + " : " + namaKolomTerpilih[i]);
                String kolomPilih = namaKolomTerpilih[i];
//                int k=0;
                for (int j = 0; j < ExcelTable.getColumnCount(); j++) {
                    if (ExcelTable.getColumnName(j).isEmpty()) {
                        continue;
                    }
                    //                System.out.println("tblname: " + table.getColumnName(j));
                    if (ExcelTable.getColumnName(j).equals(kolomPilih)) {
                        kolom[i] = j;
//                        k++;
                        break;
                    }
                }
                //            System.out.println(table.getValueAt(0, table.getColumn(namaKolomTerpilih[i]).getModelIndex()));
            }

            Workbook w = Workbook.getWorkbook(namaFileExcel);
            // Get the first sheet
            Sheet sheet = w.getSheet(0);
            // Loop over first 10 column and lines
            int jmlRow = sheet.getRows();
            Object[][] isiData = new Object[jmlRow][namaKolomTerpilih.length];
            // ISI DATA
            for (int j = 0; j < namaKolomTerpilih.length; j++) {
                for (int i = 1; i < jmlRow; i++) {
                    isiData[i][j] = sheet.getCell(kolom[j], i).getContents();
                }
            }

            ExcelTable.setModel(new javax.swing.table.DefaultTableModel(isiData, namaKolomTerpilih));
//          TableSeleksiAtribut.setModel(new javax.swing.table.DefaultTableModel(namaKolom,jmlCol));
            ExcelTable.setAutoResizeMode(ExcelTable.AUTO_RESIZE_OFF);
//          TableSeleksiAtribut.setAutoResizeMode(TableSeleksiAtribut.AUTO_RESIZE_OFF);
            jScrollPane3.setViewportView(ExcelTable);
//          jScrollPane3.setViewportView(TableSeleksiAtribut);
            AtributTable.setModel(new AbstractTableModel() {
                //mengambil nama column
                @Override
                public int getRowCount() {
                    return namaKolomTerpilih.length;
                }

                @Override
                public int getColumnCount() {
                    return 0;
                }

//                    @Override
//                    public String getColumnName(int ColumnNumber) {
//                        return "ATRIBUT";
//                    }
                @Override
                public Object getValueAt(int rowIndex, int columnIndex) {
                    return namaKolomTerpilih[rowIndex - 1];
                }
            });

        } catch (IOException ex) {
            Logger.getLogger(input.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(input.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
