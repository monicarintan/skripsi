/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ahc.view;

//import com.ahc.model.inputKompetensi;
//import com.ahc.model.kompetensi;
import com.ahc.model.Data;
import com.ahc.model.DistanceMatrix;
import com.ahc.model.EuclideanDistance;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

/**
 *
 * @author MONICA
 */
public class inputan extends javax.swing.JFrame {

    private DistanceMatrix matrix;
    private ArrayList<Data> data;
    private File namaFileExcel;
    private JFileChooser chooser = new JFileChooser();

    /**
     * Creates new form inputan
     */
    public inputan() {
        initComponents();
        setExtendedState(this.MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ExcelTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAtribut = new javax.swing.JTable();
        ProsesButton = new javax.swing.JButton();
        OkButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("cari file");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("cari");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(jButton1)
                .addContainerGap(211, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        ExcelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(ExcelTable);

        tblAtribut.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblAtribut.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblAtribut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAtributMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblAtribut);

        ProsesButton.setText("PROSES");
        ProsesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProsesButtonActionPerformed(evt);
            }
        });

        OkButton.setText("OK");
        OkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OkButton)
                            .addComponent(ProsesButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(OkButton)
                        .addGap(37, 37, 37)
                        .addComponent(ProsesButton)))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDesktopPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFile() {
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("excel", "xls"));
        fc.showOpenDialog(this);

        try {
            jTextField1.setText("");
            namaFileExcel = fc.getSelectedFile();
            jTextField1.setText(namaFileExcel.toString());
            read();

        } catch (Exception ioe) {
            System.out.println(ioe.toString());
        }
    }

    private void read() throws IOException, BiffException {
        if (namaFileExcel != null) {
            try {
                Workbook w = Workbook.getWorkbook(namaFileExcel);
                // Get the first sheet
                // TODO: ini bisa diganti untuk multiple sheets sekaligus
                Sheet sheet = w.getSheet(0);

                // Loop over first 10 column and lines
                int jmlCol = sheet.getColumns();
                int jmlRow = sheet.getRows();
                final String[] namaKolom = new String[jmlCol];
                Object[][] isiData = new Object[jmlRow][jmlCol];

//                inputKompetensi in = new inputKompetensi();
                // KALAU BARIS DATANYA TIDAK ADA, BERATI DATANYA KOSONG
                if (jmlRow > 0) {

                    // ASUMSI BAHWA BARIS PERTAMA ADALAH NAMA KOLOM
                    for (int j = 0; j < jmlCol; j++) {
                        namaKolom[j] = sheet.getCell(j, 0).getContents().toString();
//                        System.out.println("nn " + namaKolom[j]);
//                        String a = namaKolom[j];
//                        System.out.println("a = " + a);
//                        in.insertData(a.toString());
//                        
//                        for (kompetensi k : in.getALL()) {
//                            System.out.println(" coba nampilin doang nih "+k.getKompetensi());
//                            
//                        }

//                        k.setKompetensi(a);
//                        String c = k.getKompetensi();
//                        try {
//                            System.out.println("masuk ke koneksi insert prepared");
//                            com.ahc.controller.Input_Control.getKoneksiInput().insertAtribut(k);
//                        } catch (SQLException ex) {
//                            Logger.getLogger(inputan.class.getName()).log(Level.SEVERE, null, ex);
//                        }
                    }

                    // Data DATA
                    for (int j = 0; j < jmlCol; j++) {
                        for (int i = 1; i < jmlRow; i++) {
                            isiData[i - 1][j] = sheet.getCell(j, i).getContents();
                        }
                    }
                }

                // MASUKAN JUDUL KOLOM DAN Data DATA KE TABEL
                ExcelTable.setModel(new javax.swing.table.DefaultTableModel(isiData, namaKolom));

                ExcelTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                jScrollPane1.setViewportView(ExcelTable);
                mapOfColumns = new HashMap<>();
                for (int i = 4; i < namaKolom.length; i++) {
                    mapOfColumns.put(namaKolom[i], false);
                }

                //UNTUK MENAMPILKAN ATRIBUT YANG ADA 
                tblAtribut.setModel(new AbstractTableModel() {
                    @Override
                    public int getRowCount() {
                        return mapOfColumns.size();
                    }

                    @Override
                    public int getColumnCount() {
                        return 2;
                    }

                    @Override
                    public String getColumnName(int ColumnNumber) {
                        switch (ColumnNumber) {
                            case 0:
                                return "Atribut";
                            default:
                                return "Pilihan";
                        }
                    }

                    @Override
                    public Class<?> getColumnClass(int columnIndex) {
                        switch (columnIndex) {
                            case 0:
                                return String.class;
                            default:
                                return Boolean.class;
                        }
                    }

                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return columnIndex == 1;
                    }

                    @Override
                    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                        String attrName = getValueAt(rowIndex, 0).toString();
                        Boolean selected = (Boolean) aValue;
                        mapOfColumns.put(attrName, selected);
                        for (int i = 0; i < getRowCount(); i++) {
                            String name = getValueAt(i, 0).toString();
                            for (String c : mapOfColumns.keySet()) {
                                if (c.equals(name) && mapOfColumns.get(c)) {
                                    tblAtribut.addRowSelectionInterval(i, i);
                                }
                            }
                        }
                    }

                    @Override
                    public Object getValueAt(int rowIndex, int columnIndex) {
                        List<String> colNames = new ArrayList<>(mapOfColumns.keySet());
                        Collections.sort(colNames, new Comparator<String>() {

//untuk membuat angka di tabel atribut urut.
                            @Override
                            public int compare(String o1, String o2) {
                                int dif = 0;
                                for (; Character.isAlphabetic(o1.charAt(dif)); dif++);

                                int num1 = Integer.parseInt(o1.substring(dif));
                                int num2 = Integer.parseInt(o2.substring(dif));
                                return Integer.compare(num1, num2);
                            }

                        });
                        switch (columnIndex) {
                            case 0:
                                return colNames.get(rowIndex);
                            default:
                                return mapOfColumns.get(colNames.get(rowIndex));
                        }
                    }
                }
                );

//                DefaultTableModel models = (DefaultTableModel) tblAtribut.getModel();
//                models.addRow(new Object[]{namaKolom, false});
//                tblAtribut.setModel(models);
// STANDAR PEMBACAAN FILE PER-KOLOM SHEET
                //          for (int j = 0; j < jmlCol; j++) {
                //            for (int i = 0; i < jmlRow; i++) {
                //              Cell cell = sheet.getCell(j, i);
                //              CellType type = cell.getType();
                //              if (cell.getType() == CellType.LABEL)
                //                System.out.println("Bentuk String : "+ cell.getContents());
                //              if (cell.getType() == CellType.NUMBER)
                //                System.out.println("Bentuk Number : "+ cell.getContents());
                //            }
                //          }
            } catch (BiffException e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih file terlebih dahulu!");
            jButton1.requestFocus();
        }

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        openFile();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        openFile();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void tblAtributMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAtributMouseClicked

        // TODO add your handling code here:
        int RowBaris = tblAtribut.getSelectedRow();
        String kode = tblAtribut.getValueAt(RowBaris, 0).toString();

    }//GEN-LAST:event_tblAtributMouseClicked

    private void ProsesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProsesButtonActionPerformed
        if (data == null) {
            data = new ArrayList<>();
        }
        i:
        for (int i = 0; i < ExcelTable.getModel().getRowCount(); i++) {
//            System.out.print(ExcelTable.getValueAt(i, 0) + " ");
            String id = Objects.toString(ExcelTable.getValueAt(i, 0));
            if (id == null || id.equals("")) {
                continue;
            }
            double[] points = new double[ExcelTable.getModel().getColumnCount() - 4];
            for (int j = 0; j < points.length; j++) {
//                System.out.print(ExcelTable.getValueAt(i, j + 4) + " ");
                String content = Objects.toString(ExcelTable.getValueAt(i, j + 4));
                
//untuk memformat penghubung menjadi (,)                
                if (content != null && !content.equals("") && !content.equals("null")) {
                    NumberFormat nf = NumberFormat.getInstance();
                    if (nf instanceof DecimalFormat) {
                        ((DecimalFormat) nf).getDecimalFormatSymbols().setDecimalSeparator(',');
                    }
                    try {
                        points[j] = ((Number) nf.parse(content)).doubleValue();
                    } catch (ParseException ex) {
                        ex.printStackTrace();
                    }
                } else {
                    continue i;
                }
            }
            int[] cols = tblAtribut.getSelectedRows();
            Data d = new Data(id, points, cols);
            data.add(d);
            System.out.println();
        }
        System.out.println(data);

        matrix = new DistanceMatrix(new EuclideanDistance());
        matrix.computeAll(data);
        System.out.println(matrix.toString());
        
 
    }//GEN-LAST:event_ProsesButtonActionPerformed

    private void OkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkButtonActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_OkButtonActionPerformed

    /**
     * jInternalFrameinputs the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inputan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inputan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inputan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inputan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new inputan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ExcelTable;
    private javax.swing.JButton OkButton;
    private javax.swing.JButton ProsesButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tblAtribut;
    // End of variables declaration//GEN-END:variables
private Map<String, Boolean> mapOfColumns;
}
